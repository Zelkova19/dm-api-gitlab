# coding: utf-8

"""
DM.API Account

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from dm_api_account.models.rating import Rating
from dm_api_account.models.user_role import UserRole
from typing import Set
from typing_extensions import Self


class User(BaseModel):
    """
    DTO model for user
    """  # noqa: E501

    login: Optional[StrictStr] = Field(default=None, description="Login")
    roles: Optional[List[UserRole]] = Field(default=None, description="Roles")
    medium_picture_url: Optional[StrictStr] = Field(
        default=None, description="Profile picture URL M-size", alias="mediumPictureUrl"
    )
    small_picture_url: Optional[StrictStr] = Field(
        default=None, description="Profile picture URL S-size", alias="smallPictureUrl"
    )
    status: Optional[StrictStr] = Field(default=None, description="User defined status")
    rating: Optional[Rating] = None
    online: Optional[datetime] = Field(default=None, description="Last seen online moment")
    name: Optional[StrictStr] = Field(default=None, description="User real name")
    location: Optional[StrictStr] = Field(default=None, description="User real location")
    registration: Optional[datetime] = Field(default=None, description="User registration moment")
    __properties: ClassVar[List[str]] = [
        "login",
        "roles",
        "mediumPictureUrl",
        "smallPictureUrl",
        "status",
        "rating",
        "online",
        "name",
        "location",
        "registration",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of User from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of rating
        if self.rating:
            _dict["rating"] = self.rating.to_dict()
        # set to None if login (nullable) is None
        # and model_fields_set contains the field
        if self.login is None and "login" in self.model_fields_set:
            _dict["login"] = None

        # set to None if roles (nullable) is None
        # and model_fields_set contains the field
        if self.roles is None and "roles" in self.model_fields_set:
            _dict["roles"] = None

        # set to None if medium_picture_url (nullable) is None
        # and model_fields_set contains the field
        if self.medium_picture_url is None and "medium_picture_url" in self.model_fields_set:
            _dict["mediumPictureUrl"] = None

        # set to None if small_picture_url (nullable) is None
        # and model_fields_set contains the field
        if self.small_picture_url is None and "small_picture_url" in self.model_fields_set:
            _dict["smallPictureUrl"] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict["status"] = None

        # set to None if online (nullable) is None
        # and model_fields_set contains the field
        if self.online is None and "online" in self.model_fields_set:
            _dict["online"] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict["name"] = None

        # set to None if location (nullable) is None
        # and model_fields_set contains the field
        if self.location is None and "location" in self.model_fields_set:
            _dict["location"] = None

        # set to None if registration (nullable) is None
        # and model_fields_set contains the field
        if self.registration is None and "registration" in self.model_fields_set:
            _dict["registration"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of User from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "login": obj.get("login"),
                "roles": obj.get("roles"),
                "mediumPictureUrl": obj.get("mediumPictureUrl"),
                "smallPictureUrl": obj.get("smallPictureUrl"),
                "status": obj.get("status"),
                "rating": Rating.from_dict(obj["rating"]) if obj.get("rating") is not None else None,
                "online": obj.get("online"),
                "name": obj.get("name"),
                "location": obj.get("location"),
                "registration": obj.get("registration"),
            }
        )
        return _obj
