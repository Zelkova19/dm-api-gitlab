# coding: utf-8

"""
DM.API Account

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self


class PagingSettings(BaseModel):
    """
    API DTO for user paging settings
    """  # noqa: E501

    posts_per_page: Optional[StrictInt] = Field(
        default=None, description="Number of posts on a game room page", alias="postsPerPage"
    )
    comments_per_page: Optional[StrictInt] = Field(
        default=None, description="Number of commentaries on a game or a topic page", alias="commentsPerPage"
    )
    topics_per_page: Optional[StrictInt] = Field(
        default=None, description="Number of detached topics on a forum page", alias="topicsPerPage"
    )
    messages_per_page: Optional[StrictInt] = Field(
        default=None,
        description="Number of private messages and conversations on dialogue page",
        alias="messagesPerPage",
    )
    entities_per_page: Optional[StrictInt] = Field(
        default=None, description="Number of other entities on page", alias="entitiesPerPage"
    )
    __properties: ClassVar[List[str]] = [
        "postsPerPage",
        "commentsPerPage",
        "topicsPerPage",
        "messagesPerPage",
        "entitiesPerPage",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PagingSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PagingSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "postsPerPage": obj.get("postsPerPage"),
                "commentsPerPage": obj.get("commentsPerPage"),
                "topicsPerPage": obj.get("topicsPerPage"),
                "messagesPerPage": obj.get("messagesPerPage"),
                "entitiesPerPage": obj.get("entitiesPerPage"),
            }
        )
        return _obj
